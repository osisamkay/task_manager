from database.database_session import SessionLocal
from models.task import Task
from sqlalchemy.orm import Session
from typing import List


db: Session = SessionLocal()


class TaskService:
    def __init__(self, db):
        self.db = db

    def get_all_tasks(self) -> List[Task]:
        tasks = self.db.query(Task).all(db)
        return tasks

    def get_task_by_id(self, task_id: int) -> Task:
        task = self.db.query(Task).filter(Task.id == task_id).first()
        return task

    def create_task(self, task_data: Task) -> Task:
        new_task = Task(**task_data.dict())
        self.db.add(new_task)
        self.db.commit()
        self.db.refresh(new_task)  # Refresh to get the ID generated by the database
        return new_task

    def update_task(self, task_id: int, task_data: Task) -> Task:
        task = self.get_task_by_id(task_id)
        if not task:
            return None
        updated_data = task_data.dict(exclude_unset=True)
        for field, value in updated_data.items():
            setattr(task, field, value)
        self.db.commit()
        self.db.refresh(task)
        return task

    def delete_task(self, task_id: int) -> bool:
        task = self.get_task_by_id(task_id)
        if task:
            self.db.delete(task)
            self.db.commit()
            return True
        return False
